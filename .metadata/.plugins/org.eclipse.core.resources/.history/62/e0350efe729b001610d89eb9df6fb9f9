package DataStructures;

import java.util.ArrayList;
import java.util.List;

public class SimpleTree<T> implements Tree<T>{
	private BSTreeNode<Integer,T> root = null;
	
	public static SimpleTree<T> treeFromArray(T [] arr){
		
	}
	
	@Override
	public int depth(){
		return (this.root == null)? 0 : this.root.maxDepth();
	}
	
	@Override
	public List<T> inOrder(){
		List<T> arr = new ArrayList<>();
		
		if(this.root != null)
			this.root.inOrder(arr);
		
		return arr;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public String toString(){
		StringBuilder sb = new StringBuilder();
		int dpt = this.depth();
		if(dpt == 0)
			return sb.toString();
		
		BSTreeNode<Integer,T> [][] mat = (BSTreeNode<Integer,T> [][])new Object[dpt][1<<dpt - 1];
		this.root.as2DMat(mat, 0, 0, dpt);
		
		for(int i = 0; i < dpt; i++){
			for(int j = 0; j < (1<<dpt)-1; j++){
				
			}
		}
		
		return sb.toString();
	}
}
