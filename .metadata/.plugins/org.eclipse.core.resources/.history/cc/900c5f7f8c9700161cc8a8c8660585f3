package DataStructures;

import java.util.ArrayList;
import java.util.Iterator;

import Exceptions.EmptyStackException;
import Exceptions.InvalidIndexException;

public class SetOfStacks<T extends Comparable<T>> implements DataStructure<T>{
	private int maxSize;
	private ArrayList<Stack<T>> arrStack = new ArrayList<>();
	private int size = 0;
	
	public SetOfStacks(int maxSize){
		this.maxSize = maxSize;
	}
	
	@SuppressWarnings("unchecked")
	public void push(T val){
		Stack<T> st;
		if(size == 0 || arrStack.get(arrStack.size()-1).size() == maxSize){
			st = new Stack<>();
			arrStack.add(st);
		}
		else
			st = arrStack.get(arrStack.size() - 1);
		st.push(val);		
		this.size ++;
	}
	
	public T pop() throws EmptyStackException{
		if(arrStack.size() == 0)
			throw new EmptyStackException("The stack is empty!");
		T val = arrStack.get(arrStack.size() - 1)[top];
		if(top == 0)
			arrStack.remove(arrStack.size() - 1);
		
		return val;
	}
	
	public T popFirst(int index) {
		T[]arr = arrStack.get(index);
		T val = arr[0];
		int m = (index < arrStack.size() - 2)? maxSize : ((top > 0)? top : maxSize);
		for(int i = 0; i < m-1; i++){
			arr[i] = arr[i+1];
		}
		
		if(index < arrStack.size()-1)
			arr[maxSize] = popFirst(index+1);
		else{
			top = (top > 0)? top-1 : maxSize-1;
			if(top == 0)
				arrStack.remove(index);
		}
		
		return val;
	}
	
	public T popAt(int index) throws EmptyStackException, InvalidIndexException{
		if(this.isEmpty())
			throw new EmptyStackException("Stack is empty!");
		if(index < 0 || index >= arrStack.size())
			throw new InvalidIndexException("Index out of bounds!");
		
		if(index == arrStack.size() - 1)
			return this.pop();
		else{
			T[]arr = arrStack.get(index);
			T val = arr[this.maxSize-1];
			arr[this.maxSize - 1] = popFirst(index + 1);
			
			return val;
		}
	}
	
	@Override
	public Iterator<T> iterator() {
		return new Iterator<T>(){
			private int point = top;
			private int stackPoint = arrStack.size() - 1;
			
			@Override
			public boolean hasNext() {
				// TODO Auto-generated method stub
				return stackPoint >= 0;
			}

			@Override
			public T next() {
				T[] arr = arrStack.get(stackPoint);
				point = (point == 0)? maxSize - 1: point-1;
				T val = arr[point];
				if(point == 0)
					stackPoint--;
				
				return val;
			}
			
		};
	}
	
	@Override
	public boolean isEmpty() {
		return arrStack.size() == 0;
	}
	
}
