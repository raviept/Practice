package DataStructures;

import java.util.ArrayList;
import java.util.Iterator;

import Exceptions.EmptyStackException;

public class SetOfStacks<T> implements DataStructure<T>{
	private int maxSize;
	private ArrayList<T[]> arrStack = new ArrayList<>();
	private int top = 0;
	
	public SetOfStacks(int maxSize){
		this.maxSize = maxSize;
	}
	
	@SuppressWarnings("unchecked")
	public void push(T val){
		T [] arr;
		if(top == 0){
			arr = (T[])new Object[maxSize];
			arrStack.add(arr);
		}
		else
			arr = arrStack.get(arrStack.size() - 1);
		arr[top] = val;
		top = (top+1)%maxSize;
	}
	
	public T pop() throws EmptyStackException{
		if(arrStack.size() == 0)
			throw new EmptyStackException("The stack is empty!");
		top = (top > 0)? top-1: maxSize-1;
		
		T val = arrStack.get(arrStack.size() - 1)[top];
		if(top == 0)
			arrStack.remove(arrStack.size() - 1);
		
		return val;
	}
	
	@Override
	public Iterator<T> iterator() {
		return new Iterator<T>(){
			private int point = top;
			private int stack = arrStack.size();
			
			@Override
			public boolean hasNext() {
				// TODO Auto-generated method stub
				return false;
			}

			@Override
			public T next() {
				// TODO Auto-generated method stub
				return null;
			}
			
		};
	}
	
	@Override
	public boolean isEmpty() {
		return arrStack.size() == 0;
	}
	
}
