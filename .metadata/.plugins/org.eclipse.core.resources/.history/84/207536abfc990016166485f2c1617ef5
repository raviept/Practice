package DataStructures;

import java.util.ArrayList;
import java.util.Scanner;

public class AVL<K extends Comparable<K>,T> implements MyMap<K,T>{
	private AVLNode<K,T> root;
	private int size = 0;
	
	public void put(K key,T data){
		this.root = AVLNode.put(root, key, data);
	}
	
	public void remove(K key){
		root = AVLNode.remove(root, key);
	}
	
	public int depth(){
		if(root == null)
			return 0;
		else
			return this.root.depth();			
	}
	
	@Override
	public int size() {
		return this.size;
	}

	@Override
	public boolean isEmpty() {
		return (this.size == 0);
	}

	@Override
	public boolean containsKey(K key) {
		if(this.root == null)
			return false;
		return (this.root.search(key) != null);
	}
	
	@Override
	public T get(K key){
		if(this.root == null)
			throw new EmptyTreeException("No such key exists!");
		AVLNode<K,T> node = this.root.search(key);
		if(node == null)
			throw new EmptyTreeException("No such key exists!");
		
		return node.getData();
	}
	
	private void preOrderFill(ArrayList<AVLNode<K,T>> arr, int l, int n){
		arr.set(l + (n/2),this);
		if(this.left != null){
			this.left.preOrderFill(arr, l, (n/2));
		}
		if(this.right != null){
			this.right.preOrderFill(arr, l + (n/2) + 1, n - (n/2) - 1);
		}
	}
	
	@Override
	public String toString(){
		if(this.isEmpty())
			return "";
		int dpt = this.depth();
		System.out.println("Depth "+ dpt);
		int size = (1<<dpt) - 1;
		System.out.println("Size " + size);
		ArrayList<AVLNode<K,T>> arr = new ArrayList<>(size);
		for(int i = 0; i < size; i++){
			arr.add(null);
		}
		
		preOrderFill(arr, 0, size);
		return stringRep(arr,dpt);
	}
	
	public static void main(String []args){
		AVLNode<Integer,String> root = null;
		Scanner scan = new Scanner(System.in);
		String data;
		do{
			int key = Integer.parseInt(scan.nextLine());
			data = scan.nextLine();
			root = put(root,key,data);
			System.out.println(root);
		}while(!data.equals("q"));
		scan.close();
	}
}
