package DataStructures;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

import Mix.StringUtils;

public final class AVL<K extends Comparable<K>,T> implements MyMap<K,T>{
	private AVLNode<K,T> root;
	private int size = 0;
	
	public void put(K key,T data){
		if(!this.containsKey(key))
			this.size++;
		this.root = AVLNode.put(root, key, data);
	}
	
	public void remove(K key){
		if(this.containsKey(key))
			this.size--;		
		root = AVLNode.remove(root, key);
	}
	
	public int depth(){
		if(root == null)
			return 0;
		else
			return this.root.depth();			
	}
	
	@Override
	public int size() {
		return this.size;
	}

	@Override
	public boolean isEmpty() {
		return (this.size == 0);
	}

	@Override
	public boolean containsKey(K key) {
		if(this.root == null)
			return false;
		return (this.root.search(key) != null);
	}
	
	@Override
	public T get(K key){
		if(this.root == null)
			throw new EmptyTreeException("No such key exists!");
		AVLNode<K,T> node = this.root.search(key);
		if(node == null)
			throw new EmptyTreeException("No such key exists!");
		
		return node.getData();
	}
	
	@Override
	public Set<K> keySet() {
		Set<K> set = new HashSet<>();
		if(this.isEmpty())
			return set;
		List<AVLNode<K,T>> auxList = new ArrayList<>();
		this.root.inOrder(auxList);
		for(AVLNode<K,T> node : auxList)
			set.add(node.getKey());
		return set;
	}

	@Override
	public List<T> values() {
		List<T> list = new ArrayList<>();
		if(this.isEmpty())
			return list;
		List<AVLNode<K,T>> auxList = new ArrayList<>();
		this.root.inOrder(auxList);
		for(AVLNode<K,T> node : auxList)
			list.add(node.getData());
		
		return list;
	}
	
	/**
	 * 
	 * @param arr List of nodes in vertical order
	 * @param dpt
	 * @return
	 */
	private String [][] visualMat(List<AVLNode<K,T>> arr, int dpt){
		String [][] mat = new String[dpt][1<<(dpt-1)];
		
		for(int i = 0; i < dpt; i++){//Iterates over each level
			int hpos = arr.size()/(1<<(i+1));//Index in the array of the next element from the current level
			int hind = 0;//Relative index of the next element from the current level
			
			for(int j = 0; j < arr.size(); j++){
				if(j == hpos){
					AVLNode<K,T> node = arr.get(j);
					String hat = "";
					String val = "";
					if(node != null){
						hat = "|";
						val = node.toString();
					}
					else if(i > 0){
						hat = "|";
						int hFpos = arr.size()/(1<<i);
						int hFind = hind/2;
						int father = hFpos + 2*(hFpos + 1)*hFind;
						if(arr.get(father) != null)
							val = ".";
					}
					
					sb.append(StringUtils.center(hat, 9));
					sb2.append(StringUtils.center(val, 9));
					hpos += 2*(hpos + 1);
					hind++;
				}
		}
	}
	
	private String stringRep(String [][]mat, int dpt){
		StringBuilder sb = new StringBuilder();
		
		
		}
		
	}
		
	@Override
	public String toString(){
		String visual = "";
		if(!this.isEmpty()){
			int dpt = this.depth();
			int size = (1<<dpt) - 1;
			ArrayList<AVLNode<K,T>> arr = new ArrayList<>(size);
			for(int i = 0; i < size; i++){
				arr.add(null);
			}			
			this.root.preOrderFill(arr, 0, size);
			visual = stringRep(arr,dpt);
		}
		
		return String.format("Size: %d%nDepth: %d%n%s",
				this.size(),this.depth(),visual);
	}
	
	public static void main(String []args){
		AVL<Integer,String> avl = new AVL<>();
		Scanner scan = new Scanner(System.in);
		String data;
		do{
			int key = Integer.parseInt(scan.nextLine());
			data = scan.nextLine();
			avl.put(key,data);
			System.out.println();
			System.out.println("---------------------------------------------------------------------");
			System.out.println(avl);			
			System.out.println();
		}while(!data.equals("q"));
		scan.close();
	}	
}
