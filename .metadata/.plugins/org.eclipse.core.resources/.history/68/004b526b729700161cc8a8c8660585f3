package DataStructures;

import java.util.Iterator;

import Exceptions.EmptyStackException;

public class Stack<T extends Comparable<T>> implements DataStructure<T>{
	LinkNode<T> head = null;
	
	public void push(T el){
		LinkNode<T> next = head, prevMin = min;
		head = new LinkNode<T>(el);
		head.setNext(next);
	}
	
	public T pop() throws EmptyStackException{
		if(this.isEmpty())
			throw new EmptyStackException("The stack is empty!");
		T el = this.head.getEl();
		this.head = this.head.getNext();
		
		return el;
	}
	
	public T peek() throws EmptyStackException{
		if(this.isEmpty())
			throw new EmptyStackException("The stack is empty!");
		
		return this.head.getEl();
	}
	
	public T min() throws EmptyStackException{
		if(this.isEmpty())
			throw new EmptyStackException("The stack is empty!");
		
		return this.min.getEl();
	}
	
	public boolean isEmpty(){
		return this.head == null;
	}

	@Override
	public Iterator<T> iterator() {
		return new Iterator<T>(){
			LinkNode<T> pointer = head;
			
			public boolean hasNext(){
				return this.pointer != null;
			}

			@Override
			public T next() {
				T el = pointer.getEl();
				pointer = pointer.getNext();
				return el;
			}			
		};
	}	
}
