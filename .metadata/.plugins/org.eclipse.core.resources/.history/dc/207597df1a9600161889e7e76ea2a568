package DataStructures;

public class LinkNode<T> {
	private T el;
	private LinkNode<T> next;
	
	public LinkNode(T el){
		this.el = el;
	}
	
	public void setNext(LinkNode<T> next){
		this.next = next;
	}
	
	public void add(T el){
		if(this.next == null){
			this.next = new LinkNode(el);
		}
		else{
			this.next.add(el);
		}
	}
	
	public static <T extends Comparable<T>> LinkNode<T> remove(LinkNode<T> node, T el){
		LinkNode<T> head = node;
		while(head != null && head.el.compareTo(el) == 0){
			head = head.next;
		}
		if(head != null){
			LinkNode<T> prev = head;
			do{
				mat[n-s-1][n-i-1]
				while(next!= null && next.el.compareTo(el) == 0){
					next = next.next;
				}
				prev.next = next;
				prev = next;
			}while(prev != null);
		}		
		
		return head;
	}
}
