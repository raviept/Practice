package Prints;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import DataStructures.DataStructure;
import DataStructures.LinkNode;

public class Prints {
	public static void printArr(int []arr){
		for(int i = 0; i < arr.length; i++){
			System.out.print(arr[i] + " ");
		}
		System.out.println();
	}
	
	public static void printMat(int [][]mat, int m, int n){
		for(int i = 0; i < m; i++){
			for(int j = 0; j < m; j++){
				System.out.print(mat[i][j] + " ");
			}
			System.out.println("");
		}
	}
	
	public static void printLittleEndian(int n){
		ArrayList<Integer> arr = new ArrayList<>();
		while(n != 0){
			int b = n%2;
			arr.add(b);
			n = n>>1;
		}
		for(int i = arr.size() - 1; i>= 0; i--){
			System.out.print(arr.get(i));
		}
		
		System.out.println();
	}
	
	public static <T> void printList(LinkNode<T> head){
		if(head == null)
			return;
		Iterator<T> iter = head.iterator();
		
		while(iter.hasNext()){
			System.out.print(iter.next() + " ");
		}
		
		System.out.println("");
	}
	
	public static <T> void printData(DataStructure<T> data){
		if(data == null)
			return;
		for(T el : data){
			System.out.print(el + " ");
		}
		
		System.out.println("");
	}

	public static void printDec(String num) {
		Decimal dec = Decimal.fromString(num);
		if(dec == null)
			System.out.println("ERROR");
		else{
			System.out.println(dec);
		}
	}
	
	private static class Decimal{
		private int intPart = 0;
		private double decPart = 0;
		
		private static Decimal fromString(String s){
			Decimal dec = new Decimal();
			int i = 0;
			while(i < s.length() && s.charAt(i) != '.'){
				char c = s.charAt(i);
				if(c < '0' || c > '9')
					return null;
				dec.intPart = dec.intPart*10 + c - '0';
			}
			
			if(i == s.length())
				return dec;
			i++;
			if(i == s.length())
				return null;
			double d = 10;
			do{
				char c = s.charAt(i);
				if(c < '0' || c > '9')
					return null;
				dec.decPart = dec.decPart + (double)(c - '0')/d;
				d *= 10;
			}while(i< s.length());
			
			
			return dec;
		}
		
		@Override
		public String toString(){
			StringBuilder sb = new StringBuilder();
			
			int i = this.intPart;
			double j = this.decPart;
			List<Integer> bits = new ArrayList<Integer>();
			do{
				bits.add(i & 0x1);
				i = i>>1;
			}while(i > 0);
			for(int x = bits.size() -1 ; x>= 0; x--)
				sb.append(bits.get(x));
			if(j > 0){
				sb.append(".");
			}
			
			
			return sb.toString();
		}
	}
}
